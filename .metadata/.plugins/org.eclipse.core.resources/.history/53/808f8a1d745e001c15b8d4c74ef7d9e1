package com.alibaba.nacos.console.security.nacos;

import com.alibaba.nacos.core.storage.StorageFactory;
import com.alibaba.nacos.core.storage.kv.KvStorage;


import java.io.File;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;


public final class LockedUsers {
	
	private int logintries = 0; //Number of attempted login tries
	
    private static  int permittedtries = 3; //Number of allowed consecutive login tries
    
    private static int cooldowntime = 30;	//Time it takes (in seconds) to cooldown after consecutive failed login attempts
    
    private static Calendar cooldowncalendar = Calendar.getInstance();
    
    private long cooldownontime = cooldowncalendar.getTime().getTime();
    
    private Date currenttime;
	
    
    
    
	private static LockedUsers instance;	//A variable guaranteeing singleton status to this class
    
	private KvStorage kvStorage;			//The kvStorage instance used to mantain continuity in the registry of locked out users
	
	private List<byte[]> keys;
	private Collection<byte[]> time_names;
	
	

    private LockedUsers() {
    	try {
            String baseDir = System.getProperty("user.home");
            String dir = baseDir + File.separator + "nacos_safety_login";
            this.kvStorage = StorageFactory.createKvStorage(KvStorage.KvType.Memory, "", dir); //Switch to KvType.RocksDB once it's implementation gets fixed
            this.kvStorage.snapshotLoad(dir+ File.separator+"snapshot");
            this.keys = this.kvStorage.allKeys();
            Map<byte[],byte[]> storage_map = this.kvStorage.batchGet(this.keys);
            this.time_names=storage_map.values();
    	} catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static LockedUsers getInstance() {
        if (instance == null) {
            instance = new LockedUsers();
        }
        return instance;
    }
	
    public void lock_user(String user) {
    	
    }

}
