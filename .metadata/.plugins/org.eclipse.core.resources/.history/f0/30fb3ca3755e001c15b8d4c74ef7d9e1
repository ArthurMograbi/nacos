package com.alibaba.nacos.console.security.nacos;

import com.alibaba.nacos.core.storage.StorageFactory;
import com.alibaba.nacos.core.storage.kv.KvStorage;


import java.io.File;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;



public final class LockedUsers {
	
	private String STORAGE_PATH = "nacos_spam_login_prevention";
	
	private String SNAPSHOT_FILENAME = "snapshot";
	
	
	private int logintries = 0; //Number of attempted login tries
	
    private static  int permittedtries = 3; //Number of allowed consecutive login tries
    
    private static int cooldowntime = 30;	//Time it takes (in seconds) to cooldown after consecutive failed login attempts
    
    private static Calendar cooldowncalendar = Calendar.getInstance();
    
    private Date currenttime;
	
    
    
    
	private static LockedUsers instance;	//A variable guaranteeing singleton status to this class
    
	private KvStorage kvStorage;			//The kvStorage instance used to mantain continuity in the registry of locked out users
	
	private Collection<byte[]> time_names; /*The timestamp of the time of lockout and the username for each user who attempted login
											in the last 5 minutes, separated by ','*/
	
	

    private LockedUsers() {
    	
    	try {
    		
            String baseDir = System.getProperty("user.home");
            String dir = baseDir + File.separator + STORAGE_PATH;						//Setting the dir for future operations
            
            this.kvStorage = StorageFactory.createKvStorage(KvStorage.KvType.Memory, "", dir); //Switch to KvType.RocksDB once it's implementation gets fixed
            
            this.kvStorage.snapshotLoad(dir+ File.separator+SNAPSHOT_FILENAME);
            List<byte[]> keys = this.kvStorage.allKeys();
            Map<byte[],byte[]> storage_map = this.kvStorage.batchGet(keys);
            this.time_names=storage_map.values();
            
    	} catch (Exception e) {
    		
            e.printStackTrace();
        }
    	
    }

    public static LockedUsers getInstance() {
    	
        if (instance == null) {
        	
            instance = new LockedUsers();
            
        }
        return instance;
    }
    
    private void clearOld() {
    	
    }
	
    public void lockUser(String user) {
    	
    }
    
    private Updat() {}

}
